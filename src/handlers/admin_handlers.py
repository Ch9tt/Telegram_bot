"""
–ú–æ–¥—É–ª—å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

import logging
from aiogram import types
from aiogram.dispatcher import FSMContext
from src.config.config import ADMIN_ID, VALID_CONDITIONS
from src.database.database import get_all_ads, get_ad_by_id, update_ad_field, delete_ad
from src.handlers.states import EditAdForm
from src.keyboards.keyboards import get_admin_keyboard

async def handle_admin_menu(callback_query: types.CallbackQuery):
    """Handle admin menu access."""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    await callback_query.message.edit_text(
        "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_keyboard()
    )

async def edit_ads(callback_query: types.CallbackQuery):
    """Handle advertisement editing."""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return

    try:
        ads = await get_all_ads()
        if not ads:
            await callback_query.message.edit_text("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
            return

        keyboard = types.InlineKeyboardMarkup(row_width=2)
        for ad in ads:
            keyboard.add(types.InlineKeyboardButton(
                f"ID: {ad['id']} | {ad['ad_type']} | {ad['username']}",
                callback_data=f"edit_{ad['id']}"
            ))
        keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin"))

        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )

    except Exception as e:
        logging.error(f"Error in edit_ads: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π.")

async def edit_ad(callback_query: types.CallbackQuery):
    """Handle individual advertisement editing."""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return

    ad_id = int(callback_query.data.split('_')[1])
    try:
        ad = await get_ad_by_id(ad_id)
        if not ad:
            await callback_query.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø", callback_data=f"edit_type_{ad_id}"),
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data=f"edit_date_{ad_id}"),
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —é–∑–µ—Ä", callback_data=f"edit_username_{ad_id}"),
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f"edit_time_{ad_id}"),
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è", callback_data=f"edit_conditions_{ad_id}"),
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å CPM/–ø—Ä–∏–±—ã–ª—å", callback_data=f"edit_value_{ad_id}"),
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"status_{ad_id}"),
            types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{ad_id}"),
            types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_ads")
        )

        response = (
            f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ID: {ad_id}\n\n"
            f"–¢–∏–ø: {ad['ad_type']}\n"
            f"–î–∞—Ç–∞: {ad['date']}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ad['username']}\n"
            f"–í—Ä–µ–º—è: {ad['time']}\n"
            f"–£—Å–ª–æ–≤–∏—è: {ad['conditions']}\n"
        )
        if ad['ad_type'] == 'CPM':
            response += f"CPM: {ad['cpm']}\n"
        else:
            response += f"–ü—Ä–∏–±—ã–ª—å: {ad['profit']}\n"
        response += f"–°—Ç–∞—Ç—É—Å: {ad['payment_status']}"

        await callback_query.message.edit_text(response, reply_markup=keyboard)

    except Exception as e:
        logging.error(f"Error in edit_ad: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–∏.")

async def change_status(callback_query: types.CallbackQuery):
    """Handle advertisement status change."""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return

    ad_id = int(callback_query.data.split('_')[1])
    try:
        ad = await get_ad_by_id(ad_id)
        new_status = "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ" if ad['payment_status'] == "–û–ø–ª–∞—á–µ–Ω–æ" else "–û–ø–ª–∞—á–µ–Ω–æ"
        await update_ad_field(ad_id, 'payment_status', new_status)
        await callback_query.answer("–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
        await edit_ad(callback_query)

    except Exception as e:
        logging.error(f"Error in change_status: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.", show_alert=True)

async def delete_ad(callback_query: types.CallbackQuery):
    """Handle advertisement deletion."""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return

    ad_id = int(callback_query.data.split('_')[1])
    try:
        await delete_ad(ad_id)
        await callback_query.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        await edit_ads(callback_query)

    except Exception as e:
        logging.error(f"Error in delete_ad: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.", show_alert=True) 