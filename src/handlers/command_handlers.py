"""
–ú–æ–¥—É–ª—å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥
"""

import logging
from aiogram import types
from aiogram.dispatcher import FSMContext
from src.keyboards.keyboards import get_main_menu, get_settings_menu, get_ad_type_menu
from src.config.config import ADMIN_ID, BOT_USERNAME
from src.database.database import get_all_ads

async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    welcome_text = (
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∫–ª–∞–º–Ω—ã–π –±–æ—Ç!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )
    await message.reply(welcome_text, reply_markup=get_main_menu())

async def add_ad(message: types.Message):
    """Handle 'Add advertisement' button."""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–∫–ª–∞–º—ã:",
        reply_markup=get_ad_type_menu()
    )

async def view_db_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        ads = await get_all_ads()
        
        if not ads:
            await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.", reply_markup=get_main_menu())
            return

        message_text = ["üìä –í—Å–µ –∑–∞–ø–∏—Å–∏:"]
        for ad in ads:
            message_text.append(f"""
<b>#{ad['id']}</b>
–¢–∏–ø: {ad['ad_type']}
–î–∞—Ç–∞: {ad['date']}
–í—Ä–µ–º—è: {ad['time']}
–Æ–∑–µ—Ä: {ad['username']}
–£—Å–ª–æ–≤–∏—è: {ad['conditions']}
CPM: {ad['cpm'] or '‚Äî'}
–û—Ö–≤–∞—Ç: {ad['reach'] or '‚Äî'}
–ü—Ä–∏–±—ã–ª—å: {ad['profit'] or '‚Äî'}
–°—Ç–∞—Ç—É—Å: {ad['payment_status']}
{'='*20}
""")
        
        await message.answer(
            '\n'.join(message_text),
            parse_mode='HTML',
            reply_markup=get_main_menu()
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_main_menu()
        )

async def show_help(message: types.Message):
    """Show help information."""
    help_text = """
    üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

    1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã:
       - –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É"
       - –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (CPM –∏–ª–∏ –§–ò–ö–°)
       - –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
         –î–î.–ú–ú.–ì–ì–ì–ì, @—é–∑–µ—Ä, –≤—Ä–µ–º—è, —É—Å–ª–æ–≤–∏—è, CPM/—Å—É–º–º–∞

    2. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è:
       - 24—á, 48—á, 72—á
       - 3–¥–Ω—è, –Ω–µ–¥–µ–ª—è
       - –±–µ—Å—Å—Ä–æ—á–Ω–æ

    3. –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
       - –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ë–î"
       - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞

    4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
       - –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
       - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    """
    await message.answer(help_text, reply_markup=get_main_menu())

async def open_settings(message: types.Message):
    """Handle 'Settings' button."""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=get_settings_menu())

async def back_to_main(message: types.Message):
    """Handle 'Back' button."""
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

async def admin_panel(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    from src.keyboards.keyboards import get_admin_keyboard
    await message.answer(
        "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_keyboard()
    )

async def handle_mention(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞."""
    clean_text = message.text.replace(f"@{BOT_USERNAME}", "").strip()
    if not clean_text:
        await message.reply("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    message.text = clean_text
    from src.handlers.ad_handlers import process_ad_data
    await process_ad_data(message) 