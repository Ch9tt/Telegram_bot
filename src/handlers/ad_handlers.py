"""
–ú–æ–¥—É–ª—å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Ä–µ–∫–ª–∞–º—ã
"""

import logging
from datetime import datetime, timedelta
from aiogram import types
from aiogram.dispatcher import FSMContext
from src.config.config import VALID_CONDITIONS
from src.database.database import add_advertisement
from src.keyboards.keyboards import get_main_menu
from src.handlers.states import AdForm

async def choose_ad_type(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ–∫–ª–∞–º—ã."""
    ad_type = callback_query.data.split('_')[1].upper()
    async with state.proxy() as data:
        data['ad_type'] = ad_type
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="open_menu"))
    
    await callback_query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ ({ad_type}) –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–î–î.–ú–ú.–ì–ì–ì–ì, @—é–∑–µ—Ä, –≤—Ä–µ–º—è, —É—Å–ª–æ–≤–∏—è, CPM/—Å—É–º–º–∞",
        reply_markup=keyboard
    )
    await AdForm.waiting_for_data.set()

async def process_ad_data(message: types.Message, ad_type: str = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º—ã."""
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∞ –∑–∞–ø—è—Ç—ã–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        text = message.text.replace(',', ', ')
        # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        text = ' '.join(text.split())
        parts = text.split(', ')
        
        if len(parts) not in (5, 6):
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n–î–î.–ú–ú.–ì–ì–ì–ì, @—é–∑–µ—Ä, –≤—Ä–µ–º—è, —É—Å–ª–æ–≤–∏—è, CPM/—Å—É–º–º–∞")
            return

        # Parse input data
        if len(parts) == 5:
            date, username, time, conditions, value = parts
            ad_type = 'CPM' if '.' in value else '–§–ò–ö–°'
        else:
            date, username, time, conditions, ad_type_input, value = parts
            ad_type = ad_type_input.upper()

        # Validate advertisement type
        if ad_type not in ['CPM', '–§–ò–ö–°']:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–∏–ø–µ —Ä–µ–∫–ª–∞–º—ã! –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã: CPM –∏–ª–∏ –§–ò–ö–°")
            return

        # Validate conditions
        if conditions.lower() not in [c.lower() for c in VALID_CONDITIONS]:
            await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—Å–ª–æ–≤–∏—è! –î–æ–ø—É—Å—Ç–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è: {', '.join(VALID_CONDITIONS)}")
            return

        # Validate date format
        try:
            datetime.strptime(date, "%d.%m.%Y")
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
            return

        # Process and save data
        ad_id = await add_advertisement(
            ad_type=ad_type,
            date=date,
            username=username,
            time=time,
            conditions=conditions,
            value=value,
            payment_status='–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ' if ad_type == 'CPM' else '–û–ø–ª–∞—á–µ–Ω–æ'
        )
        
        # Send confirmation message
        await message.reply(
            f"""
            ‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!
            
            üìÖ –î–∞—Ç–∞: {date}
            ‚è∞ –í—Ä–µ–º—è: {time}
            üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}
            üìã –£—Å–ª–æ–≤–∏—è: {conditions}
            üìà –¢–∏–ø —Ä–µ–∫–ª–∞–º—ã: {ad_type}
            üí∞ –ó–Ω–∞—á–µ–Ω–∏–µ: {value}
            """,
            reply_markup=get_main_menu()
        )

    except ValueError as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {str(e)}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.")
    except Exception as e:
        logging.error(f"Error processing ad data: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.") 