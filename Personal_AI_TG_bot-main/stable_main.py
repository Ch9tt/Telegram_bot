"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–π
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (CPM –∏ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è).
–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
- –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º—ã
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —è–∑—ã–∫–æ–≤ (RU/EN)
"""

import logging
import atexit
import os
import sys
import signal
import asyncio
import psutil
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode, ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
LOCK_FILE = "bot.lock"
API_TOKEN = ''
BOT_USERNAME = ''
ADMIN_ID =''

# –î–æ–ø—É—Å—Ç–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–µ–∫–ª–∞–º—ã
VALID_CONDITIONS = {'24—á', '48—á', '72—á', '3–¥–Ω—è', '–Ω–µ–¥–µ–ª—è', '–±–µ—Å—Å—Ä–æ—á–Ω–æ'}

# === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å–∞ ===
def is_process_running(pid):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º PID."""
    try:
        return psutil.Process(pid).is_running()
    except psutil.NoSuchProcess:
        return False

def setup_process_lock():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞."""
    if os.path.exists(LOCK_FILE):
        try:
            with open(LOCK_FILE, 'r') as f:
                old_pid = int(f.read().strip())
            if is_process_running(old_pid):
                print("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä.")
                sys.exit()
            else:
                os.remove(LOCK_FILE)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            os.remove(LOCK_FILE)

    with open(LOCK_FILE, 'w') as f:
        f.write(str(os.getpid()))

def cleanup():
    """–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ."""
    if os.path.exists(LOCK_FILE):
        os.remove(LOCK_FILE)

# === Bot Initialization ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())
scheduler = AsyncIOScheduler()

# === Keyboard Layouts ===
def get_main_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É"),
                KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ë–î")
            ],
            [
                KeyboardButton("–ü–æ–º–æ—â—å"),
                KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    )

def get_settings_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"),
                KeyboardButton("–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
            ],
            [
                KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            ]
        ],
        resize_keyboard=True
    )

def get_ad_type_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ–∫–ª–∞–º—ã."""
    menu = InlineKeyboardMarkup(row_width=2)
    menu.add(
        InlineKeyboardButton("CPM", callback_data="type_cpm"),
        InlineKeyboardButton("–§–ò–ö–°", callback_data="type_fixed"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="open_menu")
    )
    return menu

def get_language_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."""
    menu = InlineKeyboardMarkup(row_width=2)
    menu.add(
        InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton("English", callback_data="lang_en"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="open_menu")
    )
    return menu

# === Database Management ===
async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏."""
    try:
        async with aiosqlite.connect('advertisements.db') as db:
            await db.execute('''
            CREATE TABLE IF NOT EXISTS ads (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                ad_type TEXT NOT NULL,
                date TEXT NOT NULL,
                username TEXT NOT NULL,
                time TEXT NOT NULL,
                conditions TEXT NOT NULL,
                cpm REAL,
                reach INTEGER,
                profit REAL,
                payment_status TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            ''')
            await db.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

# === State Management ===
class AdForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã —Ä–µ–∫–ª–∞–º—ã."""
    waiting_for_data = State()

# === Message Handlers ===
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    welcome_text = (
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∫–ª–∞–º–Ω—ã–π –±–æ—Ç!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )
    await message.reply(welcome_text, reply_markup=get_main_menu())

@dp.message_handler(lambda m: m.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É")
async def add_ad(message: types.Message):
    """Handle 'Add advertisement' button."""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–∫–ª–∞–º—ã:",
        reply_markup=get_ad_type_menu()
    )

@dp.message_handler(lambda m: m.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ë–î")
async def view_db_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        async with aiosqlite.connect('advertisements.db') as db:
            async with db.execute('SELECT * FROM ads') as cursor:
                ads = await cursor.fetchall()
        
        if not ads:
            await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.", reply_markup=get_main_menu())
            return

        message_text = ["üìä –í—Å–µ –∑–∞–ø–∏—Å–∏:"]
        for ad in ads:
            message_text.append(f"""
<b>#{ad[0]}</b>
–¢–∏–ø: {ad[1]}
–î–∞—Ç–∞: {ad[2]}
–í—Ä–µ–º—è: {ad[4]}
–Æ–∑–µ—Ä: {ad[3]}
–£—Å–ª–æ–≤–∏—è: {ad[5]}
CPM: {ad[6] or '‚Äî'}
–û—Ö–≤–∞—Ç: {ad[7] or '‚Äî'}
–ü—Ä–∏–±—ã–ª—å: {ad[8] or '‚Äî'}
–°—Ç–∞—Ç—É—Å: {ad[9]}
{'='*20}
""")
        
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="open_menu"))
        
        await message.answer(
            '\n'.join(message_text),
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_main_menu()
        )

@dp.message_handler(lambda m: m.text == "–ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    """Show help information."""
    help_text = """
    üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

    1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã:
       - –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É"
       - –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (CPM –∏–ª–∏ –§–ò–ö–°)
       - –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
         –î–î.–ú–ú.–ì–ì–ì–ì, @—é–∑–µ—Ä, –≤—Ä–µ–º—è, —É—Å–ª–æ–≤–∏—è, CPM/—Å—É–º–º–∞

    2. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è:
       - 24—á, 48—á, 72—á
       - 3–¥–Ω—è, –Ω–µ–¥–µ–ª—è
       - –±–µ—Å—Å—Ä–æ—á–Ω–æ

    3. –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
       - –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ë–î"
       - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞

    4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
       - –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
       - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    """
    await message.answer(help_text, reply_markup=get_main_menu())

@dp.message_handler(lambda m: m.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def open_settings(message: types.Message):
    """Handle 'Settings' button."""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=get_settings_menu())

@dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    """Handle 'Back' button."""
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

@dp.callback_query_handler(lambda c: c.data == 'open_menu', state='*')
async def show_main_menu(callback_query: types.CallbackQuery, state: FSMContext = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ—Ç–º–µ–Ω—è–µ–º –µ–≥–æ
        if state:
            await state.finish()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback_query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback_query.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

@dp.callback_query_handler(lambda c: c.data.startswith('type_'), state='*')
async def choose_ad_type(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ–∫–ª–∞–º—ã."""
    ad_type = callback_query.data.split('_')[1].upper()
    async with state.proxy() as data:
        data['ad_type'] = ad_type
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="open_menu"))
    
    await bot.send_message(
        callback_query.from_user.id,
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ ({ad_type}) –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–î–î.–ú–ú.–ì–ì–ì–ì, @—é–∑–µ—Ä, –≤—Ä–µ–º—è, —É—Å–ª–æ–≤–∏—è, CPM/—Å—É–º–º–∞",
        reply_markup=keyboard
    )
    await AdForm.waiting_for_data.set()

@dp.message_handler(state=AdForm.waiting_for_data)
async def process_fsm_data(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã."""
    try:
        async with state.proxy() as data:
            ad_type = data['ad_type']
            await process_ad_data(message, ad_type)
        await state.finish()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã: {e}")
        await state.finish()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu()
        )

async def process_ad_data(message: types.Message, ad_type: str = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º—ã."""
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∞ –∑–∞–ø—è—Ç—ã–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        text = message.text.replace(',', ', ')
        # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        text = ' '.join(text.split())
        parts = text.split(', ')
        
        if len(parts) not in (5, 6):
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n–î–î.–ú–ú.–ì–ì–ì–ì, @—é–∑–µ—Ä, –≤—Ä–µ–º—è, —É—Å–ª–æ–≤–∏—è, CPM/—Å—É–º–º–∞")
            return

        # Parse input data
        if len(parts) == 5:
            date, username, time, conditions, value = parts
            ad_type = 'CPM' if '.' in value else '–§–ò–ö–°'
        else:
            date, username, time, conditions, ad_type_input, value = parts
            ad_type = ad_type_input.upper()

        # Validate advertisement type
        if ad_type not in ['CPM', '–§–ò–ö–°']:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–∏–ø–µ —Ä–µ–∫–ª–∞–º—ã! –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã: CPM –∏–ª–∏ –§–ò–ö–°")
            return

        # Validate conditions
        if conditions.lower() not in [c.lower() for c in VALID_CONDITIONS]:
            await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—Å–ª–æ–≤–∏—è! –î–æ–ø—É—Å—Ç–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è: {', '.join(VALID_CONDITIONS)}")
            return

        # Validate date format
        try:
            datetime.strptime(date, "%d.%m.%Y")
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
            return

        # Process and save data
        async with aiosqlite.connect('advertisements.db') as db:
            if ad_type == 'CPM':
                cpm = float(value.replace(',', '.'))
                await db.execute('''
                INSERT INTO ads (ad_type, date, username, time, conditions, cpm, payment_status)
                VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (ad_type, date, username, time, conditions, cpm, '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'))
                
                ad_id = (await (await db.execute('SELECT last_insert_rowid()')).fetchone())[0]
                post_time = datetime.strptime(f"{date} {time}", "%d.%m.%Y %H:%M")
                
                # Schedule post processing
                scheduler.add_job(
                    lambda: asyncio.create_task(parse_post(ad_id)),
                    'date', 
                    run_date=post_time + timedelta(hours=24)
                )
            else:
                profit = float(value.replace(',', '.'))
                await db.execute('''
                INSERT INTO ads (ad_type, date, username, time, conditions, profit, payment_status)
                VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (ad_type, date, username, time, conditions, profit, '–û–ø–ª–∞—á–µ–Ω–æ'))

            await db.commit()
            
        # Send confirmation message
        await message.reply(
            f"""
            ‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!
            
            üìÖ –î–∞—Ç–∞: {date}
            ‚è∞ –í—Ä–µ–º—è: {time}
            üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}
            üìã –£—Å–ª–æ–≤–∏—è: {conditions}
            üìà –¢–∏–ø —Ä–µ–∫–ª–∞–º—ã: {ad_type}
            üí∞ –ó–Ω–∞—á–µ–Ω–∏–µ: {value}
            """,
            reply_markup=get_main_menu()
        )

    except ValueError as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {str(e)}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.")
    except Exception as e:
        logging.error(f"Error processing ad data: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@dp.message_handler(lambda m: m.text.startswith(f"@{BOT_USERNAME}"))
async def handle_mention(message: types.Message):
    clean_text = message.text.replace(f"@{BOT_USERNAME}", "").strip()
    if not clean_text:
        await message.reply("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    message.text = clean_text
    await process_ad_data(message)

def get_admin_keyboard():
    """Create admin control keyboard."""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏", callback_data="edit_ads"),
        InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏", callback_data="delete_ads"),
        InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="open_menu")
    )
    return keyboard

@dp.callback_query_handler(lambda c: c.data == 'admin')
async def handle_admin_menu(callback_query: types.CallbackQuery):
    """Handle admin menu access."""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    await callback_query.message.edit_text(
        "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data == 'edit_ads')
async def edit_ads(callback_query: types.CallbackQuery):
    """Handle advertisement editing."""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return

    try:
        async with aiosqlite.connect('advertisements.db') as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute('SELECT id, ad_type, username FROM ads ORDER BY created_at DESC')
            rows = await cursor.fetchall()

            if not rows:
                await callback_query.message.edit_text("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
                return

            keyboard = InlineKeyboardMarkup(row_width=2)
            for row in rows:
                keyboard.add(InlineKeyboardButton(
                    f"ID: {row['id']} | {row['ad_type']} | {row['username']}",
                    callback_data=f"edit_{row['id']}"
                ))
            keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin"))

            await callback_query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=keyboard
            )

    except Exception as e:
        logging.error(f"Error in edit_ads: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π.")

@dp.callback_query_handler(lambda c: c.data.startswith('edit_'))
async def edit_ad(callback_query: types.CallbackQuery):
    """Handle individual advertisement editing."""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return

    ad_id = int(callback_query.data.split('_')[1])
    try:
        async with aiosqlite.connect('advertisements.db') as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute('SELECT * FROM ads WHERE id = ?', (ad_id,))
            row = await cursor.fetchone()

            if not row:
                await callback_query.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return

            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"status_{ad_id}"),
                InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{ad_id}"),
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_ads")
            )

            response = (
                f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ID: {ad_id}\n\n"
                f"–¢–∏–ø: {row['ad_type']}\n"
                f"–î–∞—Ç–∞: {row['date']}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {row['username']}\n"
                f"–í—Ä–µ–º—è: {row['time']}\n"
                f"–£—Å–ª–æ–≤–∏—è: {row['conditions']}\n"
            )
            if row['ad_type'] == 'CPM':
                response += f"CPM: {row['cpm']}\n"
            else:
                response += f"–ü—Ä–∏–±—ã–ª—å: {row['profit']}\n"
            response += f"–°—Ç–∞—Ç—É—Å: {row['payment_status']}"

            await callback_query.message.edit_text(response, reply_markup=keyboard)

    except Exception as e:
        logging.error(f"Error in edit_ad: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–∏.")

@dp.callback_query_handler(lambda c: c.data.startswith('status_'))
async def change_status(callback_query: types.CallbackQuery):
    """Handle advertisement status change."""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return

    ad_id = int(callback_query.data.split('_')[1])
    try:
        async with aiosqlite.connect('advertisements.db') as db:
            await db.execute(
                'UPDATE ads SET payment_status = CASE WHEN payment_status = "–û–ø–ª–∞—á–µ–Ω–æ" THEN "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ" ELSE "–û–ø–ª–∞—á–µ–Ω–æ" END WHERE id = ?',
                (ad_id,)
            )
            await db.commit()
            await callback_query.answer("–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
            await edit_ad(callback_query)  # Refresh the view

    except Exception as e:
        logging.error(f"Error in change_status: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.", show_alert=True)

@dp.callback_query_handler(lambda c: c.data.startswith('delete_'))
async def delete_ad(callback_query: types.CallbackQuery):
    """Handle advertisement deletion."""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return

    ad_id = int(callback_query.data.split('_')[1])
    try:
        async with aiosqlite.connect('advertisements.db') as db:
            await db.execute('DELETE FROM ads WHERE id = ?', (ad_id,))
            await db.commit()
            await callback_query.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
            await edit_ads(callback_query)  # Return to edit menu

    except Exception as e:
        logging.error(f"Error in delete_ad: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.", show_alert=True)

async def parse_post(ad_id):
    """Process scheduled advertisement post."""
    try:
        async with aiosqlite.connect('advertisements.db') as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute('SELECT * FROM ads WHERE id = ?', (ad_id,))
            ad = await cursor.fetchone()
            
            if ad:
                # Process the advertisement post
                # Add your post processing logic here
                logging.info(f"Processing advertisement post ID: {ad_id}")
    except Exception as e:
        logging.error(f"Error processing post {ad_id}: {e}")

async def on_startup(dp):
    """Initialize bot on startup."""
    try:
        setup_process_lock()
        await init_db()
        scheduler.start()
        logging.info("Bot started successfully")
    except Exception as e:
        logging.error(f"Error during startup: {e}")
        sys.exit(1)

async def shutdown(dispatcher: Dispatcher):
    """Cleanup on bot shutdown."""
    try:
        await dispatcher.storage.close()
        await dispatcher.storage.wait_closed()
        await bot.session.close()
        scheduler.shutdown()
        cleanup()
        logging.info("Bot shutdown completed")
    except Exception as e:
        logging.error(f"Error during shutdown: {e}")

def handle_exit(sig, frame):
    """Handle exit signals."""
    logging.info("Shutting down...")
    asyncio.get_event_loop().run_until_complete(shutdown(dp))
    sys.exit(0)

if __name__ == '__main__':
    # Register signal handlers
    signal.signal(signal.SIGINT, handle_exit)
    signal.signal(signal.SIGTERM, handle_exit)
    
    # Start the bot
    try:
        executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
    except Exception as e:
        logging.error(f"Fatal error: {e}")
        sys.exit(1)